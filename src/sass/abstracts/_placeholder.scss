// Grace à l'heritage, les mixins nous permet de ne pas repeter les block de code meme lors de la compilation
@use "sass:math";
@import "./variables";
@import "./mixins";

%wFull {
  width: 100%;
}

%hFull {
  height: 100%;
}

%hAuto {
  height: auto;
}

%wAuto {
  width: auto;
}


// Pour un element qui prend 100% de son parent
%fullRation {
  @extend %wFull;
  @extend %hFull;
}

// Pour que la hauteur et la largeur aie la meme valeur
%sameAsWidth {
  aspect-ratio: 1/1;
}

%d-none {
  display: none;
}

%posAbsolute {
  position: absolute;
}

%posFixed {
  position: fixed;
}

%posRelative {
  position: relative;
}

%posFullFixed {
  @extend %posFixed;
  height: 100vh;
}

%posFullAbsolute {

  @extend %posAbsolute;
  @extend %fullRation;
}

// Placer un element en haut à gauche
%topLeft {

  top : 0;
  left: 0;
}


// === FLEX

%flex {
  display: flex;
}

%flexCol {
  @extend %flex;
  flex-direction: column;
}


// Pour center HORIZONTALEMENT un element en FLEX ligne
%flexRowXCenter {
  @extend %flex;
  justify-content: center;
}

// Pour center VERTICALEMENT un element en FLEX ligne
%flexRowYCenter {
  @extend %flex;
  align-items: center;
}

// Pour center HORIZONTALEMENT un element en FLEX colonne
%flexColXCenter {
  @extend %flexCol;
  align-items: center;
}

// Pour center VERTICALEMENT un element en FLEX colonne
%flexColYCenter {
  @extend %flexCol;
  justify-content: center;
}

// Pour center un element en FLEX verticalement et horizontalement
%flexRowCenter,
%flexMiddle {
  @extend %flex;
  justify-content: center;
  align-items    : center;
}

// Pour center un element en FLEX en colonne verticalement et horizontalement
%flexColCenter {
  @extend %flexCol;
  justify-content: center;
  align-items    : center;
}

%featureBg {
  background-color: #f9f9f9;

  .feature__link {
    color: var(--primary-color);
  }
}

%pointer {
  cursor: pointer;
}

%paddingSection {
  padding-block: var(--section-padding);
}

%block {
  display: block;
}

%btn {
  @extend %block;
  padding      : rem(12) rem(20);
  border-radius: rem(5);
  max-width    : max-content;
}

%decorationNone {
  text-decoration: none;
}

%bgRedGradient {
  background-image: var(--primary-color-gradient);
  color           : var(--color-white);
}

%animGradient {
  animation: Gradient 0.35S forwards;
}

%roundedXFull {
  border-radius: 99px;
}

%roundedFull {
  border-radius: 100%;
}

%hoverLink {
  @include linkEffect()
}

%hoverLinkVisible {
  @include linkEffect(true);
}

%responsiveDesktopNavbar {
  .navbar__link-btn.red-gradient {
    display: none;
  }

  .navbar__buttons-list {
    gap: rem(10) !important;
  }

  @media #{$lg-screen} {
    min-height      : auto !important;
    background-color: initial !important;
    position        : initial !important;
    display         : flex !important;
    flex-direction  : row;
    align-items     : center;
    padding         : 0;

    .navbar__link-btn.red-gradient {
      display: inline-block;
    }

    .navbar__list {
      display       : flex;
      flex-direction: row;
      align-items   : center;
      gap           : rem(25);

      &:first-of-type {
        padding-top : 0;
        margin-right: auto;
      }


      &:last-of-type {
        margin-left: auto;
      }

      .btn.red-gradient {
        flex: none;
      }
    }

    .navbar__link {
      font-size  : 1rem;
      font-weight: initial;
      color      : var(--color-dark-2);
    }
  }
}

%mx-auto {
  margin-inline: auto;
}

%container {
  width         : 100%;
  margin-inline : auto;
  padding-inline: rem(20);

  @media #{$sm-screen} {
    max-width: 640px;
  }

  @media #{$md-screen} {
    max-width     : 820px;
    padding-inline: 0;
  }

  @media #{$lg-screen} {
    max-width: 1060px;
  }

  @media #{$xl-screen} {
    max-width: 1240px;
  }

}

%updatingContent {

  .container {
    width       : 100%;
    margin-right: auto;
    margin-left : auto;

    @media #{$sm-screen} {
      max-width: 640px;
    }

    @media #{$md-screen} {
      max-width: 820px;
    }

    @media #{$lg-screen} {
      max-width: 1060px;
    }

    @media #{$xl-screen} {
      max-width: 1240px;
    }

    margin-inline : auto;
  }
}

%updatingImage {

  width        : 100%;
  margin-inline: auto;

  @media #{$xxs-screen} {
    min-width: 280px !important;
  }

  @media #{$xs-screen} {
    min-width: 320px !important;
  }

  @media #{$x-sm-screen} {
    min-width: 480px !important;
  }

  @media #{$sm-screen} {
    min-width: 576px !important;
  }

  @media #{$md-screen} {
    min-width: 768px !important;
  }

  @media #{$lg-screen} {
    min-width: 992px !important;
  }

  @media #{$xl-screen} {
    min-width: 1240px !important;
  }

}

%blockSpace,
%section {
  padding-block: $basic-space;


  @media #{$sm-screen} {
    padding-block: $section-basic-space;

    &:not(:last-child),
    &:not(:last-of-type) {
      padding-bottom: 0;
    }
  }

}

%bgBlob {
  background-image   : url('/assets/images/Blob.png');
  background-size    : 450px;
  background-repeat  : no-repeat;
  background-position: top -75px right -175px;
}

.bgblob {
  @extend %bgBlob;

  &.bgblob-left {
    background-position: top -75px left -175px;
  }

  &.bgblob-center {
    background-position: center center;
  }

  &.bgblob-bottom-left {
    background-position: bottom 75px left -175px;
  }

  &.bgblob-bottom-right {
    background-position: bottom 75px right -175px;
  }
}


%textCenter {
  text-align: center;
}

%titleSpace {
  margin-block: rem(15);
}

%title-1 {
  @include makeSize($title-2, $title-1);
}

%title-2 {
  @include makeSize($title-3, $title-2);
}

%title-3 {
  @include makeSize($title-4, $title-3);
}

%title-4 {
  @include makeSize($title-5, $title-6);
}

%bold {
  font-weight: bold;
}

%title-5 {

  @include makeSize($title-6, $title-5);
}

%title-6 {
  @include makeSize($title-6, $title-6);
}

%pseudoStartElement {

  &::before,
  &::after {
    content: '';
    @extend %posAbsolute;
    z-index   : -1;
    display   : block;
    width     : 400px;
    height    : 400px;
    background: url('../../assets/images/start-gray.svg') no-repeat center center /contain;
  }
}

%shadow {
  box-shadow: $smart-shadow;
}

// ANIMATION

%fadeUp {
  animation: fadeUp var(--transition-1) forwards;
}

%fade {
  animation: fadeIn var(--transition-2) forwards;
}

%fadeRight {
  animation: fadeRight var(--transition-1) forwards;
}

%fadeLeft {
  animation: fadeRight var(--transition-1) forwards;
}

%gradientText {

  color                  : transparent;
  background-clip        : text;
  -webkit-background-clip: text;
  background-image       : var(--primary-color-gradient);
  font-weight            : bold;
}

%contentColor {

  color: var(--color-dark-2) !important;
}