@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');
@import "../abstracts/variables";

*,
*::before,
*::after {
    font-family: Inter, 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin     : 0;
    padding    : 0;
    box-sizing : border-box;
}

::-webkit-scrollbar {
    width: rem(12);
}

::-webkit-scrollbar-track {
    background-color: var(--bg-gray-smooth)
}

::-webkit-scrollbar-thumb {

    background-image  : var(--primary-color-gradient);
    -webkit-box-shadow: inset 2px 2px 5px 0 rgba(#fff, 0.7);
    box-shadow        : inset 2px 2px 5px 0 rgba(#fff, 0.7);
    border-radius     : 100px;
}

html {
    scrollbar-color: #6969dd #e0e0e0;
    scrollbar-width: thin;

}

html,
body {
    scroll-behavior: smooth;
    font-size      : var(--default-size);
    overflow-x     : hidden;
    min-height     : 100vh;
}

body {
    background-color: var(--white);
    color           : var(--color-dark-2);
    line-height     : 1.2;
}


li {
    list-style: none;
}

a,
img,
span,
data,
input,
button,
ion-icon {
    @extend %block;
}

a {
    color: inherit;
}

img {
    max-width: 100%;
    height   : auto;
}

input,
button {
    background   : none;
    border       : none;
    font         : inherit;
    outline      : none;
    border-radius: rem(5);
}

input {
    width: 100%;
}

button {
    cursor: pointer;
}


address {
    font-style: normal;
}

input,
button,
a {
    color: inherit;
}

p {
    line-height: 150%;
}

main {

    p {
        color: var(--color-gray);
    }

}

.container {
    width         : 100%;
    margin-inline : auto;
    padding-inline: rem(20);

    @media #{$sm-screen} {
        max-width: 540px;
    }

    @media #{$md-screen} {
        max-width: 720px;
    }

    @media #{$lg-screen} {
        max-width: 960px;
    }

    @media #{$xl-screen} {
        max-width: 1140px;
    }


    @media #{$md-screen} {
        padding-inline: 0;
    }
}

.red-gradient {
    background-image: var(--primary-color-gradient);
    color           : var(--color-white);
    font-weight     : 500;
}

a.red-gradient {
    color          : var(--color-white);
    text-decoration: none;

    &::after,
    &::before {
        display: none !important;

    }
}

.red-border {

    border: 1px solid var(--primary-color);
}

a.red-border,
button.red-border {
    color          : var(--primary-color);
    text-decoration: none;

    &::after,
    &::before {
        display: none !important;
    }
}

.x-rounded {
    @extend %roundedXFull;
}

.badge {
    font-weight   : 500;
    color         : var(--primary-color);
    text-transform: uppercase;
    font-size     : rem(16);
}

.bigger-text {
    font-size   : $title-3+0.3rem;
    margin-block: $min-space;

    @media #{$x-sm-screen} {
        font-size: $title-2;
    }

    @media #{$sm-screen} {

        margin-block: $basic-space;
    }

    @media #{$lg-screen} {

        margin-block: $basic-space - 0.7rem;
        font-size   : $text-bigger - 1rem;
    }
}

@include makeUtilitieSpacing();
@include makeUtilitieSpacing('mx', $generatorUtilitiesLength, 'margin-inline');
@include makeUtilitieSpacing('my', $generatorUtilitiesLength, 'margin-block');
@include makeUtilitieSpacing('m-start', $generatorUtilitiesLength, 'margin-inline-start');
@include makeUtilitieSpacing('m-end', $generatorUtilitiesLength, 'margin-inline-end');
@include makeUtilitieSpacing('m-top', $generatorUtilitiesLength, 'margin-block-start');
@include makeUtilitieSpacing('m-bottom', $generatorUtilitiesLength, 'margin-block-end');

@include makeUtilitieSpacing('p', $generatorUtilitiesLength, 'padding');
@include makeUtilitieSpacing('px', $generatorUtilitiesLength, 'padding-inline');
@include makeUtilitieSpacing('py', $generatorUtilitiesLength, 'padding-block');
@include makeUtilitieSpacing('p-left', $generatorUtilitiesLength, 'padding-inline-start');
@include makeUtilitieSpacing('p-start', $generatorUtilitiesLength, 'padding-inline-start');
@include makeUtilitieSpacing('p-end', $generatorUtilitiesLength, 'padding-inline-end');
@include makeUtilitieSpacing('p-top', $generatorUtilitiesLength, 'padding-block-start');
@include makeUtilitieSpacing('p-bottom', $generatorUtilitiesLength, 'padding-block-end');